// ==UserScript==
// @name         TurkeyZone - NewBot
// @namespace    http://tampermonkey.net/
// @version      0.0.1
// @description  Türkçe PixelZone Botu !
// @author       You
// @match        pixelzone.io
// @grant        none
// ==/UserScript==

javascript: function makeTemplate(c){ var imageData = c.getContext('2d').getImageData(0, 0, c.width, c.height).data; var data = []; var templateList = []; var i = 0; var coords = []; var debug = ""; for(var y = 0; y < c.height; y++){ for(var x = 0; x < c.width; x++){ if(imageData[y*c.width*4+x*4+3] == 255){ str = 'rgb('+imageData[y*c.width*4+x*4+0]+', '+imageData[y*4*c.width+x*4+1]+', '+imageData[y*4*c.width+x*4+2]+')'; /*templateList[i++] = [x,y,getColor(str)];*/ templateList[i++] = [x,y,str]; } } } return templateList; }; function getColor(string){ switch(string){ case 'rgb(0, 0, 0)': return 1; break; case 'rgb(38, 38, 38)': return 0; break; case 'rgb(128, 128, 128)': return 2; break; case 'rgb(255, 255, 255)': return 3; break; case 'rgb(153, 98, 61)': return 4; break; case 'rgb(255, 163, 200)': return 5; break; case 'rgb(207, 115, 230)': return 6; break; case 'rgb(128, 0, 128)': return 7; break; case 'rgb(229, 0, 0)': return 8; break; case 'rgb(229, 137, 0)': return 9; break; case 'rgb(229, 229, 0)': return 10; break; case 'rgb(150, 230, 70)': return 11; break; case 'rgb(0, 190, 0)': return 12; break; case 'rgb(0, 230, 230)': return 13; break; case 'rgb(1, 230, 230)': return 13; break; case 'rgb(0, 136, 204)': return 14; break; case 'rgb(0, 0, 230)': return 15; break; default: console.log("Error currentColor isn't indexed"); }; }; function handleFiles(files){ if (!files.length){ fileList.innerHTML = "<p>No files selected!</p>"; }else{ fileList.innerHTML = ""; var list = document.createElement("ul"); fileList.appendChild(list); var li = document.createElement("li"); var c = document.createElement("canvas"); c.oncontextmenu = function(){c.parentNode.removeChild(c);return false}; list.appendChild(c); list.appendChild(li); var ctx = c.getContext("2d"); var templateImage = new Image(); templateImage.onload = function(){ document.getElementById("mode1").checked = "checked"; mode = 1; c.height = templateImage.height; c.width = templateImage.width; ctx.drawImage(templateImage, 0, 0); window.URL.revokeObjectURL(this.src); template = makeTemplate(c); }; templateImage.src = window.URL.createObjectURL(files[0]); } }; function toggleDiv(currentDiv){ if(currentDiv.value == 0){ var temp = localStorage.ignoreColors.split(""); temp[+(currentDiv.id.split("color")[1])] = "1"; localStorage.ignoreColors = temp.join(""); currentDiv.value = 1; if(currentDiv.id=="color0"){ currentDiv.style.border = "5px solid grey"; }else{ currentDiv.style.border = "5px solid black"; } currentDiv.style.width = "12px"; currentDiv.style.height = "12px"; }else{ var temp = localStorage.ignoreColors.split(""); temp[+(currentDiv.id.split("color")[1])] = "0"; localStorage.ignoreColors = temp.join(""); currentDiv.value = 0; currentDiv.style.border = "0px solid black"; currentDiv.style.width = "22px"; currentDiv.style.height = "22px"; } } function ignoreDiv(currentDiv){ if(currentDiv.id=="color0"){ currentDiv.style.border = "5px solid grey"; }else{ currentDiv.style.border = "5px solid black"; } currentDiv.style.width = "12px"; currentDiv.style.height = "12px"; } function ignored(string){ switch(string){ case 'rgb(0, 0, 0)': return ignoredColors[0]; break; case 'rgb(38, 38, 38)': return ignoredColors[1]; break; case 'rgb(128, 128, 128)': return ignoredColors[2]; break; case 'rgb(255, 255, 255)': return ignoredColors[3]; break; case 'rgb(153, 98, 61)': return ignoredColors[4]; break; case 'rgb(255, 163, 200)': return ignoredColors[5]; break; case 'rgb(207, 115, 230)': return ignoredColors[6]; break; case 'rgb(128, 0, 128)': return ignoredColors[7]; break; case 'rgb(229, 0, 0)': return ignoredColors[8]; break; case 'rgb(229, 137, 0)': return ignoredColors[9]; break; case 'rgb(229, 229, 0)': return ignoredColors[10]; break; case 'rgb(150, 230, 70)': return ignoredColors[11]; break; case 'rgb(0, 190, 0)': return ignoredColors[12]; break; case 'rgb(0, 230, 230)': return ignoredColors[13]; break; case 'rgb(0, 136, 204)': return ignoredColors[14]; break; case 'rgb(0, 0, 230)': return ignoredColors[15]; break; default: console.log("Error currentColor isn't indexed"); } } window.onkeydown = function(e) { if (e.keyCode == 65) { /* A */ var xy = document.getElementById('content3').innerHTML.split("x:")[1].split(" y:"); document.getElementById("xmin").value = xy[0]; document.getElementById("ymin").value = xy[1]; localStorage.xmin = xy[0]; localStorage.ymin = xy[1]; } if(e.keyCode == 66) { /* B */ var xy = document.getElementById('content3').innerHTML.split("x:")[1].split(" y:"); document.getElementById("xmax").value = xy[0]; document.getElementById("ymax").value = xy[1]; localStorage.xmax = xy[0]; localStorage.ymax = xy[1]; } }; (function(){ bip2 = new Audio(); document.title = "R"; if(document.getElementById("bot") != null){ return }; var div = document.createElement('div'); div.id = "bot"; div.style.zIndex = 2; div.style.background = "#000c"; div.style.position = "fixed"; div.style.top = "10px"; div.style.left = "10px"; div.style.fontSize = "1em"; div.innerHTML = 'Box:<input type="radio" id="mode0" value="" name="group2" onchange = "mode = 0;">|File:<input id="mode1" type="radio" value="" name="group2" onchange = "mode = 1;">\ <br>\ xMin = <input id="xmin" type="text" size="3" onchange = "localStorage.xmin = this.value;">\ <br>\ xMax = <input id="xmax" type="text" size="3" onchange = "localStorage.xmax = this.value;">\ <br>\ yMin = <input id="ymin" type="text" size="3" onchange = "localStorage.ymin = this.value;">\ <br>\ yMax = <input id="ymax" type="text" size="3" onchange = "localStorage.ymax = this.value;">\ <br>\ Düz:<input type="radio" id="order0" value="" name="group1" onchange = "localStorage.order = this.id;">|Karýþýk:<input id="order1" type="radio" value="" name="group1" onchange = "localStorage.order = this.id;">\ <br>\ <input id="start" type="button" value="Start"><input id="stop" type="button" value="Stop"">\ <br>\ <input type="file" id="fileElem" onchange="handleFiles(this.files)">\ <div id="fileList">\ <p>Resim seçilmedi !</p>\ </div>\ <br>\ <div id = "feedback"></div>\ <br>\ <div id="ignorecolor" style="position: absolute; opacity: 1; display: flex;">\ <div id="colorblock1">\ <div id="color0" class="box" style="background-color: rgb(0, 0, 0); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color1" class="box" style="background-color: rgb(38, 38, 38); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color2" class="box" style="background-color: rgb(128, 128, 128); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color3" class="box" style="background-color: rgb(255, 255, 255); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color4" class="box" style="background-color: rgb(153, 98, 61); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color5" class="box" style="background-color: rgb(255, 163, 200); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color6" class="box" style="background-color: rgb(207, 115, 230); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color7" class="box" style="background-color: rgb(128, 0, 128); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ </div>\ <div id="colorblock2">\ <div id="color8" class="box" style="background-color: rgb(229, 0, 0); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color9" class="box" style="background-color: rgb(229, 137, 0); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color10" class="box" style="background-color: rgb(229, 229, 0); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color11" class="box" style="background-color: rgb(150, 230, 70); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color12" class="box" style="background-color: rgb(0, 190, 0); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color13" class="box" style="background-color: rgb(0, 230, 230); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color14" class="box" style="background-color: rgb(0, 136, 204); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ <div id="color15" class="box" style="background-color: rgb(0, 0, 230); width: 22px; height: 22px" onclick="toggleDiv(this);"></div>\ </div>\ </div>\ <div id = "feedback"></div>'; document.body.appendChild(div); document.getElementById("xmin").value = localStorage.xmin; document.getElementById("xmax").value = localStorage.xmax; document.getElementById("ymin").value = localStorage.ymin; document.getElementById("ymax").value = localStorage.ymax; document.getElementById("start").onclick = function(){initBot()}; document.getElementById("stop").onclick = function(){stopBot()}; if(typeof localStorage.order == "undefined"){ localStorage.order = "order0"; } document.getElementById(localStorage.order).checked = "checked"; mode = 0; document.getElementById("mode0").checked = "checked"; if(typeof localStorage.ignoreColors == "undefined"){ localStorage.ignoreColors = "0000000000000000"; } var ignoreColors = localStorage.ignoreColors.split(""); var colors = document.getElementById("colorblock1").children; for(var i = 0; i < colors.length; i++){ colors[i].value = ignoreColors[i]; if(colors[i].value == 1){ ignoreDiv(colors[i]); } } colors = document.getElementById("colorblock2").children; for(var i = 0; i < colors.length; i++){ colors[i].value = ignoreColors[i+8]; if(colors[i].value == 1){ ignoreDiv(colors[i]); } } var feedback = document.getElementById("feedback"); function placePixel(x, y, color){ var x_ = x%chunkSize, y_ = y%chunkSize, data, str; if(x_<0) x_+=chunkSize; if(y_<0) y_+=chunkSize; data = tiledCanvas.chunks[Math.floor(x/chunkSize)][Math.floor(y/chunkSize)].canvas.getContext('2d').getImageData(x_, y_, 1, 1).data; str = 'rgb('+data[0]+', '+data[1]+', '+data[2]+')'; if(str==currentColor) return; setPixel(x, y, color); canPlace = false; socket.emit('placePixel', { x: x+4096, y: y+4096, val: currentColorVal }); setTimer(delay); } function placePixelTemplate(x, y, color){ var x_ = x%chunkSize, y_ = y%chunkSize, data, str; if(x_<0) x_+=chunkSize; if(y_<0) y_+=chunkSize; data = tiledCanvas.chunks[Math.floor(x/chunkSize)][Math.floor(y/chunkSize)].canvas.getContext('2d').getImageData(x_, y_, 1, 1).data; str = 'rgb('+data[0]+', '+data[1]+', '+data[2]+')'; if(str==color) return; setPixel(x, y, color); canPlace = false; socket.emit('placePixel', { x: x+4096, y: y+4096, val: getColor(color) }); setTimer(delay); } function initBot(){ var xmin = +document.getElementById("xmin").value; var xmax = +document.getElementById("xmax").value; var ymin = +document.getElementById("ymin").value; var ymax = +document.getElementById("ymax").value; var order = 0; if(document.getElementById("order1").checked){ order = 1; } ignoredColors = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]; for(var i = 0; i < 16; i++){ ignoredColors[i] = +document.getElementById("color"+i).value; } if(mode){ startTemplateBot(xmin,ymin,order,template); }else{ startBot(xmin,xmax,ymin,ymax,order); } } function startTemplateBot(xMin,yMin,order,template){ document.title = "A"; if(typeof botInterval != "undefined"){ feedback.style.color = "red"; feedback.innerHTML = "Cant run multiple bots."; return } feedback.style.color = "green"; feedback.innerHTML = "Bot started."; var xmin = xMin; var ymin = yMin; var order = order; var template = template; var iCoords = 0; var coords = []; for(var i = 0; i < template.length; i++){ var myX = template[i][0]+xmin; var myY = template[i][1]+ymin; var x_ = myX%chunkSize; var y_ = myY%chunkSize; if(x_<0){ x_+=chunkSize; } if(y_<0){ y_+=chunkSize; } data = tiledCanvas.chunks[Math.floor(myX/chunkSize)][Math.floor(myY/chunkSize)].canvas.getContext('2d').getImageData(x_, y_, 1, 1).data; str = 'rgb('+data[0]+', '+data[1]+', '+data[2]+')'; if(str!=template[i][2] && !ignored(template[i][2])){ coords[iCoords++] = [myX,myY,template[i][2]]; } } var i = 0; var bipi = 0; botInterval = setInterval(function(){ if(coords.length > 0){ if(order == 0){ var x_ = coords[i][0]%chunkSize; var y_ = coords[i][1]%chunkSize; if(x_<0){ x_+=chunkSize; } if(y_<0){ y_+=chunkSize; } data = tiledCanvas.chunks[Math.floor(coords[i][0]/chunkSize)][Math.floor(coords[i][1]/chunkSize)].canvas.getContext('2d').getImageData(x_, y_, 1, 1).data; str = 'rgb('+data[0]+', '+data[1]+', '+data[2]+')'; if(str!=coords[i][2]){ if(canPlace){ if(captchaTest){ document.title = "C"; canPlace = false; bip1.play(); grecaptcha.execute(); } if(canPlace){ document.title = "A"; placePixelTemplate(coords[i][0],coords[i][1],coords[i][2]); bipi = 0; if(!mobileDevice){ lw = 0.5; lastLw = 0.5; } } }else{ if(bipi >50){ bip1.play(); bipi = 0; }else{ bipi++; } } }else{ i++; if(i == coords.length){ document.title = "S"; bip1.play(); clearInterval(botInterval); delete botInterval; botTimeout = setTimeout(function(){ delete botTimeout; startTemplateBot(xmin,ymin,order,template); },15000); } } }else if(order == 1){ i = Math.floor(Math.random() * coords.length); var x_ = coords[i][0]%chunkSize; var y_ = coords[i][1]%chunkSize; if(x_<0){ x_+=chunkSize; } if(y_<0){ y_+=chunkSize; } data = tiledCanvas.chunks[Math.floor(coords[i][0]/chunkSize)][Math.floor(coords[i][1]/chunkSize)].canvas.getContext('2d').getImageData(x_, y_, 1, 1).data; str = 'rgb('+data[0]+', '+data[1]+', '+data[2]+')'; if(str!=coords[i][2]){ if(canPlace){ if(captchaTest){ document.title = "C"; canPlace = false; bip1.play(); grecaptcha.execute(); } if(canPlace){ document.title = "A"; placePixelTemplate(coords[i][0],coords[i][1],coords[i][2]); coords.splice(i,1); bipi = 0; if(!mobileDevice){ lw = 0.5; lastLw = 0.5; } } }else{ if(bipi >50){ bip1.play(); bipi = 0; }else{ bipi++; } } }else{ coords.splice(i,1); } } }else{ document.title = "S"; bip1.play(); clearInterval(botInterval); delete botInterval; botTimeout = setTimeout(function(){ delete botTimeout; startTemplateBot(xmin,ymin,order,template); },15000); } },100); } function startBot(xMin,xMax,yMin,yMax,order){ document.title = "A"; if(typeof botInterval != "undefined"){ feedback.style.color = "red"; feedback.innerHTML = "Birden fazla bot çalýþtýramazsýnýz."; return } feedback.style.color = "green"; feedback.innerHTML = "Bot baþladý."; var xmin = xMin; var xmax = xMax; var ymin = yMin; var ymax = yMax; var order = order; var i = 0; var coords = []; for(var myY = ymax; myY >= ymin; myY--){ for(var myX = xmax; myX >= xmin; myX--){ var x_ = myX%chunkSize; var y_ = myY%chunkSize; if(x_<0){ x_+=chunkSize; } if(y_<0){ y_+=chunkSize; } data = tiledCanvas.chunks[Math.floor(myX/chunkSize)][Math.floor(myY/chunkSize)].canvas.getContext('2d').getImageData(x_, y_, 1, 1).data; str = 'rgb('+data[0]+', '+data[1]+', '+data[2]+')'; if(str!=currentColor && !ignored(str)){ coords[i++] = [myX,myY]; } } } i = 0; var bipi = 0; botInterval = setInterval(function(){ if(coords.length > 0){ if(order == 0){ var x_ = coords[i][0]%chunkSize; var y_ = coords[i][1]%chunkSize; if(x_<0){ x_+=chunkSize; } if(y_<0){ y_+=chunkSize; } data = tiledCanvas.chunks[Math.floor(coords[i][0]/chunkSize)][Math.floor(coords[i][1]/chunkSize)].canvas.getContext('2d').getImageData(x_, y_, 1, 1).data; str = 'rgb('+data[0]+', '+data[1]+', '+data[2]+')'; if(str!=currentColor){ if(canPlace){ if(captchaTest){ document.title = "C"; canPlace = false; bip1.play(); grecaptcha.execute(); } if(canPlace){ document.title = "A"; placePixel(coords[i][0],coords[i][1],currentColor); bipi = 0; if(!mobileDevice){ lw = 0.5; lastLw = 0.5; } } }else{ if(bipi >50){ bip1.play(); bipi = 0; }else{ bipi++; } } }else{ i++; if(i == coords.length){ document.title = "S"; bip1.play(); clearInterval(botInterval); delete botInterval; botTimeout = setTimeout(function(){ delete botTimeout; startBot(xmin,xmax,ymin,ymax,order); },15000); } } }else if(order == 1){ i = Math.floor(Math.random() * coords.length); var x_ = coords[i][0]%chunkSize; var y_ = coords[i][1]%chunkSize; if(x_<0){ x_+=chunkSize; } if(y_<0){ y_+=chunkSize; } data = tiledCanvas.chunks[Math.floor(coords[i][0]/chunkSize)][Math.floor(coords[i][1]/chunkSize)].canvas.getContext('2d').getImageData(x_, y_, 1, 1).data; str = 'rgb('+data[0]+', '+data[1]+', '+data[2]+')'; if(str!=currentColor){ if(canPlace){ if(captchaTest){ document.title = "C"; canPlace = false; bip1.play(); grecaptcha.execute(); } if(canPlace){ document.title = "A"; placePixel(coords[i][0],coords[i][1],currentColor); coords.splice(i,1); bipi = 0; if(!mobileDevice){ lw = 0.5; lastLw = 0.5; } } }else{ if(bipi >50){ bip1.play(); bipi = 0; }else{ bipi++; } } }else{ coords.splice(i,1); } } }else{ document.title = "S"; bip1.play(); clearInterval(botInterval); delete botInterval; botTimeout = setTimeout(function(){ delete botTimeout; startBot(xmin,xmax,ymin,ymax,order); },15000); } },100); } function stopBot(){ if(typeof botInterval == "undefined"){ if(typeof botTimeout != "undefined"){ clearTimeout(botTimeout); delete botTimeout; feedback.style.color = "red"; feedback.innerHTML = "Bot stopped."; } feedback.style.color = "red"; feedback.innerHTML = "Bot çalýþmýyor !"; return } clearInterval(botInterval); delete botInterval; feedback.style.color = "red"; feedback.innerHTML = "Bot durduruldu."; } })()
